package com.main.excel.dao;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.main.excel.app.Configurations;
import com.main.excel.app.Constants;

public class MetadataDao {
	static String URL = Configurations.getInstance().getProperty(Constants.DB_URL);
	static String CONFIG_USER = Configurations.getInstance().getProperty(Constants.CONFIG_USER);
	static String CONFIG_PASS = Configurations.getInstance().getProperty(Constants.CONFIG_PASS);
	static String ATOMIC_USER = Configurations.getInstance().getProperty(Constants.ATOMIC_USER);
	static String ATOMIC_PASS = Configurations.getInstance().getProperty(Constants.ATOMIC_PASS);
	static String INFODOM = Configurations.getInstance().getProperty(Constants.INFODOM);
	static String segment = Configurations.getInstance().getProperty(Constants.SEGMENT);
	
	/*Run Details -0*/
	public ResultSet getRunDetails(String id) throws SQLException{
		Statement stmt = getConfigConnection().createStatement();
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT X.V_OBJECT_DESC FROM PR2_OBJECT_TL X WHERE X.V_OBJECT_ID='");
		sql.append(id + "' AND  X.V_INFODOM_NAME= '");
		sql.append(INFODOM +"'");
		ResultSet resultSet = stmt.executeQuery(sql.toString());
		//System.out.println("Run Details ::"+sql.toString());
		return resultSet;
	}
	
	 /*Task Details -1*/
	public ResultSet getTaskDetails(String id,String type) throws SQLException{
		Statement stmt = getConfigConnection().createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
		StringBuilder sql = new StringBuilder();
		if (type.equals("R")){
			sql.append("SELECT 'Task'||ROWNUM TASK_SEQ, X.PROCESS_ID,X.PROCESS_NAME,X.TASK_ID, X.TASK_NAME,X.TASK_TYPE,X1.TASK_NAME AS TASK_PRECEDENCE FROM (SELECT PPB.V_PROCESS_ID,PR.V_OBJECT_UNIQUE_NAME AS PROCESS_ID,PRO.V_OBJECT_DESC AS PROCESS_NAME, CASE WHEN PPT.V_TASK_TYPE_CODE LIKE 'TYPE%' THEN PRO1.V_OBJECT_DESC ELSE PPT.V_TASK_REF_UNIQUE_NAME END AS TASK_NAME, NVL(PRO1.V_OBJECT_ID,PPT.V_TASK_REF_UNIQUE_NAME) TASK_ID, PPT.V_TASK_TYPE_CODE AS TASK_TYPE, PPT.N_TASK_ID,PPT.N_TASK_ORDER, PPTP.N_PRECEDENCE_TASK_ID FROM PR2_RUN_OBJECT PR INNER JOIN PR2_PROCESS_B PPB ON PR.V_OBJECT_UNIQUE_NAME=PPB.V_PROCESS_NAME AND PR.V_INFODOM_NAME=PPB.V_INFODOM_NAME AND PPB.N_PROCESS_VERSION =0 INNER JOIN PR2_OBJECT_TL PRO ON PPB.V_PROCESS_ID=PRO.V_OBJECT_ID AND PR.V_INFODOM_NAME=PRO.V_INFODOM_NAME INNER JOIN PR2_PROCESS_TASK PPT ON PPB.V_PROCESS_ID=PPT.V_PROCESS_ID AND PR.V_INFODOM_NAME=PPT.V_INFODOM_NAME LEFT OUTER JOIN PR2_RULE_B PRB ON PRB.V_RULE_NAME=PPT.V_TASK_REF_UNIQUE_NAME AND PRB.N_RULE_VERSION=0 AND PR.V_INFODOM_NAME=PRB.V_INFODOM_NAME LEFT OUTER JOIN PR2_OBJECT_TL PRO1 ON PRB.V_RULE_ID=PRO1.V_OBJECT_ID AND PR.V_INFODOM_NAME=PRO1.V_INFODOM_NAME LEFT OUTER JOIN PR2_PROCESS_TASK_PRECEDENCE PPTP ON PPB.V_PROCESS_ID=PPTP.V_PROCESS_ID AND PPT.N_TASK_ID=PPTP.N_TASK_ID AND PR.V_INFODOM_NAME=PPTP.V_INFODOM_NAME WHERE PR.V_RUN_ID='");
			sql.append(id + "' AND  PPB.V_INFODOM_NAME= '");
			sql.append(INFODOM+"'AND PPB.V_FOLDER_NAME='"+segment+"' AND PPT.V_TASK_TYPE_CODE NOT IN 'ROOT' ORDER BY PR.N_OBJECT_ORDER,PPT.N_TASK_ORDER) X LEFT OUTER JOIN (SELECT PPB.V_PROCESS_ID,PR.V_OBJECT_UNIQUE_NAME AS PROCESS_ID,PRO.V_OBJECT_DESC AS PROCESS_NAME, CASE WHEN PPT.V_TASK_TYPE_CODE LIKE 'TYPE%' THEN PRO1.V_OBJECT_DESC ELSE PPT.V_TASK_REF_UNIQUE_NAME END AS TASK_NAME, PPT.V_TASK_TYPE_CODE AS TASK_TYPE, PPT.N_TASK_ID,PPT.N_TASK_ORDER, PPTP.N_PRECEDENCE_TASK_ID FROM PR2_RUN_OBJECT PR INNER JOIN PR2_PROCESS_B PPB ON PR.V_OBJECT_UNIQUE_NAME=PPB.V_PROCESS_NAME AND PR.V_INFODOM_NAME=PPB.V_INFODOM_NAME AND PPB.N_PROCESS_VERSION =0 INNER JOIN PR2_OBJECT_TL PRO ON PPB.V_PROCESS_ID=PRO.V_OBJECT_ID AND PR.V_INFODOM_NAME=PRO.V_INFODOM_NAME INNER JOIN PR2_PROCESS_TASK PPT ON PPB.V_PROCESS_ID=PPT.V_PROCESS_ID AND PR.V_INFODOM_NAME=PPT.V_INFODOM_NAME LEFT OUTER JOIN PR2_RULE_B PRB ON PRB.V_RULE_NAME=PPT.V_TASK_REF_UNIQUE_NAME AND PRB.N_RULE_VERSION=0 AND PR.V_INFODOM_NAME=PRB.V_INFODOM_NAME LEFT OUTER JOIN PR2_OBJECT_TL PRO1 ON PRB.V_RULE_ID=PRO1.V_OBJECT_ID AND PR.V_INFODOM_NAME=PRO1.V_INFODOM_NAME LEFT OUTER JOIN PR2_PROCESS_TASK_PRECEDENCE PPTP ON PPB.V_PROCESS_ID=PPTP.V_PROCESS_ID AND PPT.N_TASK_ID=PPTP.N_TASK_ID AND PR.V_INFODOM_NAME=PPTP.V_INFODOM_NAME WHERE PR.V_RUN_ID='");
			sql.append(id + "' AND  PPB.V_INFODOM_NAME= '");
			sql.append(INFODOM+"' AND PPB.V_FOLDER_NAME='"+segment+"' AND PPT.V_TASK_TYPE_CODE NOT IN 'ROOT' ORDER BY PR.N_OBJECT_ORDER,PPT.N_TASK_ORDER) X1 ON X.V_PROCESS_ID=X1.V_PROCESS_ID AND X1.N_TASK_ID=X.N_PRECEDENCE_TASK_ID");
		} 
		else if(type.equals("B")) {
			sql.append("SELECT BPM.V_TASK_ID TASK_SEQ,'"+id+"' PROCESS_NAME, TRIM(BPM.V_PARAMETER_VALUE) TASK_ID, (CASE WHEN BPM.V_PARAMETER_NAME ='Rule Code' THEN PRO.V_OBJECT_DESC ELSE BPM.V_PARAMETER_VALUE END) TASK_NAME, CASE BPM.V_PARAMETER_NAME WHEN 'Rule Name' THEN 'DATE' WHEN 'Rule Code' THEN 'TYPE' ELSE 'T2T' END TASK_TYPE, BPM1.V_PARAMETER_VALUE TASK_PRECEDENCE FROM BATCH_PARAMETER_MASTER BPM INNER JOIN BATCH_TASK_PRECEDENCE_MASTER BTPM ON BPM.V_BATCH_ID=BTPM.V_BATCH_ID AND BPM.V_TASK_ID=BTPM.V_TASK_ID AND BPM.I_PARAMETER_ORDER IN (CASE BPM.V_PARAMETER_NAME WHEN 'Rule Name' THEN 4 WHEN 'Rule Code' THEN 4 ELSE 6 END) LEFT OUTER JOIN BATCH_PARAMETER_MASTER BPM1 ON BPM1.V_BATCH_ID =BTPM.V_BATCH_ID AND BPM1.V_TASK_ID =BTPM.V_PARENT_TASK_ID AND BPM1.I_PARAMETER_ORDER IN (CASE BPM1.V_PARAMETER_NAME WHEN 'Rule Name' THEN 4 WHEN 'Rule Code' THEN 4 ELSE 6 END) AND BPM1.I_PARAMETER_ORDER=BPM.I_PARAMETER_ORDER LEFT OUTER JOIN PR2_OBJECT_TL PRO ON TRIM(BPM.V_PARAMETER_VALUE)=PRO.V_OBJECT_ID WHERE BPM.V_BATCH_ID ='");
			sql.append(INFODOM+"_"+id + "' AND BPM.V_PARAMETER_VALUE<>'NULL' ORDER BY DECODE(BTPM.V_PARENT_TASK_ID,'START',0,TO_NUMBER(SUBSTR(BTPM.V_TASK_ID,5,LENGTH(BTPM.V_TASK_ID))))");
		}
		
		/*else if(type.equals("B")) {
			sql.append("SELECT 'Task'||ROWNUM TASK_SEQ,'FSI_D_LOAD' PROCESS_NAME,V_PARAMETER_VALUE TASK_ID,V_PARAMETER_VALUE TASK_NAME,'T2T' TASK_TYPE, V_PARAMETER_VALUE TASK_PRECEDENCE");
			sql.append(" FROM BATCH_PARAMETER_MASTER WHERE I_PARAMETER_ORDER=6 AND V_PARAMETER_VALUE IN ('T2T_STG_CARDS_CAS','T2T_STG_FX_CONTRACTS_CAS','T2T_STG_INVESTMENTS_CAS','T2T_STG_LC_CAS','T2T_STG_LOANS_CAS','T2T_STG_MM_CAS','T2T_STG_MUTUAL_FUNDS_CAS','T2T_STG_OD_CAS','T2T_STG_OPTIONS_CAS','T2T_STG_FUTURES_CAS','T2T_STG_LEASES_CONTRACTS_CAS','T2T_STG_REPO_CONTRACTS_CAS','T2T_STG_SWAPS_CONTRACTS_CAS','T2T_STG_BILLS_CAS','T2T_STG_CREDIT_DERIVATIVES_CAS','T2T_STG_ANNUITY_CONTRACTS_CAS','T2T_STG_BORROWINGS_CAS','T2T_STG_CASA_CAS','T2T_STG_GUARANTEES','T2T_STG_TD_CONTRACTS_CAS','T2T_STG_TRUSTS_CAS','T2T_STG_COMMITMENT_CONTRACTS_CAS','T2T_STG_BORROWING_COMMITMENTS_CAS','T2T_STG_CORRESPONDENT_ACCOUNT_CAS','T2T_FCT_ACCT_RECOVERY_DETAILS','T2T_FCT_ACCT_WRITE_OFF_DETAILS','T2T_FCT_ASSETS_SOLD','T2T_FCT_CAP_INSTR_POSITIONS','T2T_FCT_CAP_INSTR_TXNS','T2T_FCT_CARDS_SUMMARY','T2T_FCT_CREDIT_LINE','T2T_FCT_FIXED_ASSETS','T2T_FCT_FUND_CIS_COMPOSITION','T2T_FCT_LEGAL_ENTITY_DETAILS','T2T_FCT_LOANS_SERVICED','T2T_FCT_MERCHANT_BANKING','T2T_FCT_RECOVERY','T2T_FCT_SPEND_OBLIGATIONS','T2T_FDB_STG_BORROWINGS','T2T_FDB_STG_CASA','T2T_FDB_STG_TD_CONTRACTS','T2T_FFSIS_STG_CASA','T2T_FFSIS_STG_CUSTODIAL_ACCOUNTS','T2T_FFSIS_STG_INVESTMENTS','T2T_FFSIS_STG_MANAGED_INV_ADV','T2T_FFSIS_STG_MUTUAL_FUNDS','T2T_FFSIS_STG_RETIREMENT_ACCOUNTS','T2T_FFSIS_STG_TD_CONTRACTS','T2T_FFSIS_STG_TRUSTS','T2T_FLAS_STG_LEASES_CONTRACTS','T2T_FLAS_STG_LOAN_CONTRACTS','T2T_FLAS_STG_OD_ACCOUNTS')");
			sql.append(" ORDER BY V_BATCH_ID, TO_NUMBER(SUBSTR(V_TASK_ID,5))");
		}*/
		//System.out.println("Task Details:"+sql.toString());
		return stmt.executeQuery(sql.toString());
	}
	
	/*Rule Details -2*/
	public ResultSet getRuleDetails(String id) throws SQLException{
		Statement stmt = getConfigConnection().createStatement();
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT PR.V_RULE_ID,PR.V_RULE_NAME,PRO.V_OBJECT_DESC, PR.V_CREATED_BY, PR.D_CREATED_DATE, PR.V_LAST_MODIFIED_BY, PR.D_LAST_MODIFIED_DATE, PR.V_LAST_AUTHORIZED_BY, PR.D_LAST_AUTHORIZED_DATE, PR.V_DATASET_NAME, PR.V_RULE_TYPE_CODE, LISTAGG(MEM.V_ELEMENT_VALUE,' WHERE ') WITHIN GROUP (ORDER BY MEM.V_ELEMENT_CODE, PR.V_RULE_ID, PRO.V_OBJECT_DESC, PR.V_CREATED_BY, PR.D_CREATED_DATE, PR.V_LAST_MODIFIED_BY, PR.D_LAST_MODIFIED_DATE, PR.V_LAST_AUTHORIZED_BY, PR.D_LAST_AUTHORIZED_DATE, PR.V_DATASET_NAME, PR.V_RULE_TYPE_CODE) DATASET_DETAILS FROM PR2_RULE_B PR INNER JOIN PR2_OBJECT_TL PRO ON PR.V_RULE_ID   =PRO.V_OBJECT_ID AND PR.V_INFODOM_NAME=PRO.V_INFODOM_NAME INNER JOIN METADATA_ELEMENT_MASTER MEM ON MEM.V_METADATA_CODE=PR.V_DATASET_NAME AND MEM.N_METADATA_VERSION=0 AND MEM.V_ELEMENT_CODE IN ('ANSIJOIN','DATEFILTER') WHERE PR.V_RULE_ID='");
		sql.append(id + "' AND  PR.V_INFODOM_NAME= '");
		sql.append(INFODOM+"'AND PR.V_FOLDER_NAME='"+segment+"'");
		sql.append("GROUP BY PR.V_RULE_ID,PR.V_RULE_NAME,PRO.V_OBJECT_DESC, PR.V_CREATED_BY, PR.D_CREATED_DATE, PR.V_LAST_MODIFIED_BY, PR.D_LAST_MODIFIED_DATE, PR.V_LAST_AUTHORIZED_BY, PR.D_LAST_AUTHORIZED_DATE, PR.V_DATASET_NAME, PR.V_RULE_TYPE_CODE");
		//System.out.println("Rule SQL:"+sql.toString());
		return stmt.executeQuery(sql.toString());
	}
	
	/*Rule Source And Target Details -3*/
	public ResultSet getRuleSourceTargetDetails(String id) throws SQLException{
		Statement stmt = getConfigConnection().createStatement();
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT /*DISTINCT*/ ( CASE PRO.V_OBJECT_LOCATION_CODE WHEN 'S' THEN 'Source Hierarchy' WHEN 'T' THEN CASE PRO.V_OBJECT_TYPE_CODE WHEN 'HCY' THEN 'Target Hierarchy' ELSE 'Business Processor' END END) COL1, MAX(CASE WHEN PRO.V_OBJECT_LOCATION_CODE='S' OR PRO.V_OBJECT_TYPE_CODE='HCY' THEN PRO.V_OBJECT_UNIQUE_NAME ELSE NVL(REPLACE(REPLACE(PROM.V_MEMBER_UNIQUE_NAME,'[',''),']',''),PRO.V_OBJECT_UNIQUE_NAME) END) CODE1,MLM.LOCALE_DESCRIPTION DESC1,UPPER(MIN(MEM.V_ELEMENT_VALUE)||'.'||MAX(MEM.V_ELEMENT_VALUE)) VALUE1,(CASE WHEN PRO.V_OBJECT_LOCATION_CODE='T' AND NVL(PRO.V_OBJECT_TYPE_CODE,'BP')<>'HCY' THEN 'BP' ELSE PRO.V_OBJECT_LOCATION_CODE END) OBJECT_TYPE_CODE,PRO.N_OBJECT_ORDER FROM PR2_RULE_OBJECT PRO LEFT OUTER JOIN PR2_RULE_OBJECT_MEMBER PROM ON PROM.V_RULE_ID=PRO.V_RULE_ID AND PRO.V_OBJECT_UNIQUE_NAME=PROM.V_OBJECT_UNIQUE_NAME LEFT OUTER JOIN METADATA_LOCALE_MASTER MLM ON  (CASE WHEN PRO.V_OBJECT_LOCATION_CODE='S' OR PRO.V_OBJECT_TYPE_CODE='HCY' THEN PRO.V_OBJECT_UNIQUE_NAME ELSE NVL(REPLACE(REPLACE(PROM.V_MEMBER_UNIQUE_NAME,'[',''),']',''),PRO.V_OBJECT_UNIQUE_NAME) END) ||':SD'=MLM.METADATA_KEY AND MLM.VERSION_NO =0 ");
		sql.append("LEFT OUTER JOIN METADATA_ELEMENT_MASTER MEM ON MEM.V_METADATA_CODE= PRO.V_OBJECT_UNIQUE_NAME AND MEM.N_METADATA_VERSION=0 /*AND MEM.V_ELEMENT_CODE= 'LEVELEXPRESSION'*/ AND MEM.V_ELEMENT_CODE IN ('ATTRIBUTE','ENTITY') AND MEM.V_ELEMENT_PARENT_CODE='HIERARCHY' AND MEM.N_ELEMENT_ORDER=0 WHERE PRO.V_RULE_ID='");
		sql.append(id + "' AND PRO.V_INFODOM_NAME='"+INFODOM+"'");
		sql.append(" GROUP BY PRO.V_OBJECT_LOCATION_CODE,PRO.V_OBJECT_TYPE_CODE,PRO.V_OBJECT_UNIQUE_NAME,MLM.LOCALE_DESCRIPTION,PRO.V_OBJECT_LOCATION_CODE,PRO.N_OBJECT_ORDER");
		sql.append(" ORDER BY PRO.V_OBJECT_LOCATION_CODE,PRO.N_OBJECT_ORDER");
		//System.out.println("Rule Source And Target Details:"+sql.toString());
		return stmt.executeQuery(sql.toString());
	}
	
	/*Rule Mapping Details -4*/ 
	public ResultSet getRuleMappingDetails(String id) throws SQLException{
		Statement stmt = getConfigConnection().createStatement();
		StringBuilder sql = new StringBuilder();
		//sql.append("SELECT DISTINCT PRM.V_RULE_ID, '('||S1.LOCALE_DESCRIPTION || CASE WHEN PRM.V_SOURCE_MEMBER_2 IS NOT NULL THEN ') AND (' END||S2.LOCALE_DESCRIPTION|| CASE WHEN PRM.V_SOURCE_MEMBER_3 IS NOT NULL THEN ') AND (' END ||S3.LOCALE_DESCRIPTION|| CASE WHEN PRM.V_SOURCE_MEMBER_4 IS NOT NULL THEN ') AND (' END ||S4.LOCALE_DESCRIPTION|| CASE WHEN PRM.V_SOURCE_MEMBER_5 IS NOT NULL THEN ') AND (' END||S5.LOCALE_DESCRIPTION|| CASE WHEN PRM.V_SOURCE_MEMBER_6 IS NOT NULL THEN ') AND (' END||S6.LOCALE_DESCRIPTION|| CASE WHEN PRM.V_SOURCE_MEMBER_7 IS NOT NULL THEN ') AND (' END||S7.LOCALE_DESCRIPTION|| CASE WHEN PRM.V_SOURCE_MEMBER_8 IS NOT NULL THEN ') AND (' END||S8.LOCALE_DESCRIPTION|| CASE WHEN PRM.V_SOURCE_MEMBER_9 IS NOT NULL THEN ') AND (' END||S9.LOCALE_DESCRIPTION||')' AS SOURCE_NAME,  NVL(T1.LOCALE_DESCRIPTION, MLM.LOCALE_DESCRIPTION)||CASE WHEN PRO.V_OBJECT_TYPE_CODE='HCY' THEN '('||PRO.V_TARGET_COLUMN_NAME||')' ELSE '{'||SUBSTR(PRMR.V_RTP_VALUE,INSTR(PRMR.V_RTP_VALUE,':',1,2)+1,INSTR(PRMR.V_RTP_VALUE,'}',1,1)-INSTR(PRMR.V_RTP_VALUE,':',1,2)) END AS TARGET_NAME, PRM.V_TARGET_MEMBER AS TARGET_MEMBER, CASE WHEN MM.METADATA_TYPE=59 THEN 'BP' ELSE 'NA' END AS METADATA_TYPE, PRM.N_MAP_ID FROM  PR2_RULE_MAP PRM INNER JOIN PR2_RULE_OBJECT PRO ON PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='T' LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S1 ON S1.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_1 AND S1.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=1) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S2 ON S2.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_2 AND S2.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=2) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S3 ON S3.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_3 AND S3.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=3) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S4 ON S4.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_4 AND S4.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=4) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S5 ON S5.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_5 AND S5.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=5) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S6 ON S6.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_6 AND S6.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=6) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S7 ON S7.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_7 AND S7.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=7) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S8 ON S8.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_8 AND S8.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=8) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S9 ON S9.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_9 AND S9.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=9) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER T1 ON T1.UNIQUE_CODE=PRM.V_TARGET_MEMBER AND T1.HIER_CODE=PRO.V_OBJECT_UNIQUE_NAME LEFT OUTER JOIN PR2_RULE_MAP_PR PRMR ON PRMR.V_RULE_ID = PRM.V_RULE_ID LEFT OUTER JOIN METADATA_LOCALE_MASTER MLM ON PRM.V_TARGET_MEMBER||':SD'=MLM.METADATA_KEY AND MLM.VERSION_NO=0  LEFT OUTER JOIN METADATA_MASTER MM ON PRM.V_TARGET_MEMBER=MM.METADATA_CODE AND MM.METADATA_VERSION=0 WHERE PRM.V_RULE_ID='");
		
		sql.append("SELECT DISTINCT PRM.V_RULE_ID, S1.LOCALE_DESCRIPTION S1,S2.LOCALE_DESCRIPTION S2,S3.LOCALE_DESCRIPTION S3,S4.LOCALE_DESCRIPTION S4,S5.LOCALE_DESCRIPTION S5,S6.LOCALE_DESCRIPTION S6,S7.LOCALE_DESCRIPTION S7,S8.LOCALE_DESCRIPTION S8,S9.LOCALE_DESCRIPTION S9, NVL(T1.LOCALE_DESCRIPTION, MLM.LOCALE_DESCRIPTION)||CASE WHEN PRO.V_OBJECT_TYPE_CODE='HCY' THEN '(' ||PRO.V_TARGET_COLUMN_NAME ||')' ELSE '{' ||SUBSTR(PRMR.V_RTP_VALUE,INSTR(PRMR.V_RTP_VALUE,':',1,2)+1,INSTR(PRMR.V_RTP_VALUE,'}',1,1)-INSTR(PRMR.V_RTP_VALUE,':',1,2)) END AS TARGET_NAME, PRM.V_TARGET_MEMBER AS TARGET_MEMBER, CASE WHEN MM.METADATA_TYPE=59 THEN 'BP' ELSE 'NA' END AS METADATA_TYPE, PRM.N_MAP_ID ");
		sql.append("FROM PR2_RULE_MAP PRM INNER JOIN PR2_RULE_OBJECT PRO ON PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='T' LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S1 ON S1.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_1 AND S1.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=1) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S2 ON S2.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_2 AND S2.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=2) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S3 ON S3.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_3 AND S3.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=3) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S4 ON S4.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_4 AND S4.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=4) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S5 ON S5.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_5 AND S5.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=5) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S6 ON S6.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_6 AND S6.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=6) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S7 ON S7.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_7 AND S7.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=7) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S8 ON S8.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_8 AND S8.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=8) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER S9 ON S9.UNIQUE_CODE=PRM.V_SOURCE_MEMBER_9 AND S9.HIER_CODE IN (SELECT PRO.V_OBJECT_UNIQUE_NAME FROM PR2_RULE_OBJECT PRO WHERE PRO.V_RULE_ID=PRM.V_RULE_ID AND PRO.V_OBJECT_LOCATION_CODE='S' AND PRO.N_OBJECT_ORDER=9) LEFT OUTER JOIN ATOMIC.VIEW_REV_BIHIER T1 ON T1.UNIQUE_CODE=PRM.V_TARGET_MEMBER AND T1.HIER_CODE=PRO.V_OBJECT_UNIQUE_NAME LEFT OUTER JOIN PR2_RULE_MAP_PR PRMR ON PRMR.V_RULE_ID = PRM.V_RULE_ID LEFT OUTER JOIN METADATA_LOCALE_MASTER MLM ON PRM.V_TARGET_MEMBER||':SD'=MLM.METADATA_KEY AND MLM.VERSION_NO=0  LEFT OUTER JOIN METADATA_MASTER MM ON PRM.V_TARGET_MEMBER=MM.METADATA_CODE AND MM.METADATA_VERSION=0 WHERE PRM.V_RULE_ID='");
		sql.append(id + "' AND PRM.V_INFODOM_NAME='"+INFODOM+"'");
		sql.append(" ORDER BY PRM.N_MAP_ID");
		//System.out.println("Rule Mapping Details:"+sql.toString());
		return stmt.executeQuery(sql.toString());
	}
	
	/*Business Processor Details -5*/ 
	public ResultSet getBPDetails(String id) throws SQLException{
		Statement stmt = getConfigConnection().createStatement();
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT MM.METADATA_CODE, MLM.LOCALE_DESCRIPTION, MM.CREATED_BY, MM.CREATION_DT, MM.MODIFIED_BY, MM.MODIFIED_DT, MM.AUTHORIZED_BY, MM.AUTHORIZED_DT, MAX( CASE WHEN MEM.V_ELEMENT_CODE='DATASET' THEN MEM.V_ELEMENT_VALUE END) DATASET, MAX( ( CASE WHEN MEM.V_ELEMENT_CODE='TARGET_MEASURE' THEN MEM.V_ELEMENT_VALUE ||'-' ||MLM1.LOCALE_DESCRIPTION END) || (SELECT '(' ||LISTAGG(V_ELEMENT_VALUE,'.') WITHIN GROUP ( ORDER BY V_ELEMENT_CODE DESC) ||')' FROM METADATA_ELEMENT_MASTER WHERE V_METADATA_CODE =MEM.V_ELEMENT_VALUE AND N_METADATA_VERSION=0 AND V_ELEMENT_CODE IN ('ATTRIBUTE','ENTITY') )) TARGET_MEASURE, MAX( CASE WHEN MEM.V_ELEMENT_CODE='AGGREGATE' AND MEM.V_ELEMENT_VALUE='Y' THEN 'TRUE' ELSE 'FALSE' END) AGG_TYPE, MAX( CASE WHEN MEM.V_ELEMENT_CODE ='NAME' AND MEM.V_ELEMENT_PARENT_CODE='EXPRESSION' THEN MEM.V_ELEMENT_VALUE END) EXPRESSION, MAX( CASE WHEN MEM.V_ELEMENT_CODE ='CODE' AND MEM.V_ELEMENT_PARENT_CODE='EXPRESSION' THEN MEM.V_ELEMENT_VALUE ||'-' ||MLM2.LOCALE_DESCRIPTION END) USED_MEASURES FROM METADATA_MASTER MM INNER JOIN METADATA_LOCALE_MASTER MLM ON MLM.METADATA_KEY = MM.METADATA_CODE ||':SD' AND MLM.VERSION_NO =0 AND MM.METADATA_VERSION=0 LEFT OUTER JOIN METADATA_ELEMENT_MASTER MEM ON MEM.V_METADATA_CODE =MM.METADATA_CODE AND MEM.N_METADATA_VERSION=0 LEFT OUTER JOIN METADATA_LOCALE_MASTER MLM1 ON MLM1.METADATA_KEY = MEM.V_ELEMENT_VALUE ||':SD' AND MLM.VERSION_NO=0 LEFT OUTER JOIN METADATA_LOCALE_MASTER MLM2 ON MLM2.METADATA_KEY = SUBSTR(MEM.V_ELEMENT_VALUE,2,LENGTH(MEM.V_ELEMENT_VALUE)- 2) ||':LD' AND MLM2.VERSION_NO =0 WHERE MM.METADATA_CODE='");
		sql.append(id + "'");
		sql.append(" GROUP BY MM.METADATA_CODE,MLM.LOCALE_DESCRIPTION,MM.CREATED_BY,MM.CREATION_DT, MM.MODIFIED_BY,MM.MODIFIED_DT,MM.AUTHORIZED_BY,MM.AUTHORIZED_DT");
		//System.out.println("Business Processor Details:"+sql.toString());
		return stmt.executeQuery(sql.toString());
	}
	
	/*Data Transformation Details -6*/ 
	public ResultSet getDTDetails(String id) throws SQLException{
		Statement stmt = getAtomicConnection().createStatement();
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT COUNT(1) TOTAL FROM SYS.ALL_SOURCE WHERE OWNER ='");
		sql.append(Configurations.getInstance().getProperty(Constants.ATOMIC_USER).toUpperCase()+"' AND TYPE='FUNCTION' AND  UPPER(NAME) LIKE UPPER('FN_%");
		sql.append(id + "%') ORDER BY LINE ASC");
		//System.out.println("DT Query0:"+sql.toString());
		ResultSet rs1= stmt.executeQuery(sql.toString());
		ResultSet rs = null;
		rs1.next();
		if(Integer.parseInt(rs1.getString("TOTAL"))<1){
			sql = new StringBuilder();
			sql.append("SELECT NAME, TEXT FROM SYS.ALL_SOURCE WHERE OWNER ='");
			sql.append(Configurations.getInstance().getProperty(Constants.ATOMIC_USER).toUpperCase()+"' AND TYPE='FUNCTION' AND  UPPER(NAME) LIKE UPPER('%");
			sql.append(id + "%') ORDER BY LINE ASC");
			//System.out.println("DT Query1:"+sql.toString());
			rs = stmt.executeQuery(sql.toString());
		}
		else {
			sql = new StringBuilder();
			sql.append("SELECT NAME, TEXT FROM SYS.ALL_SOURCE WHERE OWNER ='");
			sql.append(Configurations.getInstance().getProperty(Constants.ATOMIC_USER).toUpperCase()+"' AND TYPE='FUNCTION' AND  UPPER(NAME) LIKE UPPER('FN_%");
			sql.append(id + "%') AND UPPER(NAME) NOT LIKE '%RBI%' ORDER BY LINE ASC");
			//System.out.println("DT Query2:"+sql.toString());
			rs = stmt.executeQuery(sql.toString());
		}
		return rs;
	}
	/*Get All Functions*/
	public List<String> getAllFunctions() throws SQLException{
		Statement stmt = getAtomicConnection().createStatement();
		StringBuilder sql = new StringBuilder();
		sql.append("SELECT DISTINCT NAME FUNSTION_NAME FROM SYS.ALL_SOURCE WHERE OWNER ='");
		sql.append(Configurations.getInstance().getProperty(Constants.ATOMIC_USER).toUpperCase()+"' AND TYPE='FUNCTION'");
		sql.append(" AND NAME NOT LIKE '%_1' AND ( NAME LIKE 'FN_%' OR NAME LIKE 'DT_%' OR NAME LIKE 'BTMU_%') ORDER BY NAME");
		 ResultSet rs = stmt.executeQuery(sql.toString());
		 List<String> functionList  = new ArrayList<String>();
		 while (rs.next()){
			 functionList.add(rs.getString("FUNSTION_NAME"));
		 }
		 
		return functionList;
	}

	public Connection getConfigConnection() {
		try {
			return DBConnection.getJDBCConnection(URL, CONFIG_USER, CONFIG_PASS);
		}
		catch (SQLException e){
			System.out.println(e.getMessage());
		}
		return null;
	}
	
	public Connection getAtomicConnection() {
		try {
			return DBConnection.getJDBCConnection(URL, ATOMIC_USER, ATOMIC_PASS);
		}
		catch (SQLException e){
			System.out.println(e.getMessage());
		}
		return null;
	}
}
